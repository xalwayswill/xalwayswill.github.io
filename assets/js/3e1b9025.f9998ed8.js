"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4558],{41984:(r,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var e=t(74848),i=t(28453);const o={},s=void 0,p={id:"script/xrun",title:"xrun",description:"",source:"@site/docs/script/xrun.md",sourceDirName:"script",slug:"/script/xrun",permalink:"/docs/script/xrun",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/script/xrun.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"verdi-license",permalink:"/docs/script/verdi-license"},next:{title:"\u5b9a\u4e49\u89e3\u91ca\u5668",permalink:"/docs/script/\u5b9a\u4e49\u89e3\u91ca\u5668"}},a={},d=[];function l(r){const n={code:"code",pre:"pre",...(0,i.R)(),...r.components};return(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:'#!/usr/bin/env python3\r\n\r\nimport os\r\nimport sys\r\nimport subprocess\r\nimport argparse\r\nimport shutil\r\nfrom string import Template\r\nfrom filelist import expd_fl\r\n\r\n\r\ndef find_dir_path(root_path, target_dir):\r\n    """\r\n    find the path of each design folder\r\n    """\r\n    dir_path = ""\r\n    hit = False\r\n    list_dirs = os.walk(root_path)\r\n    for root, dirs, files in list_dirs:\r\n        for dir in dirs:\r\n            if dir.upper() == target_dir.upper():\r\n                dir_path = os.path.join(root, dir)\r\n                hit = True\r\n                break\r\n        if hit == True:\r\n            break\r\n\r\n    if hit == False:\r\n        print("GRUN-Error: Cann\'t find the design folder, please check the design name!!!")\r\n        sys.exit()\r\n\r\n    return dir_path\r\n\r\n\r\ndef set_flow_dir_map():\r\n    """\r\n    Set the dir mapping of each flow\r\n    """\r\n\r\n    flow_dir_map = {\r\n        "lint": "spyglass",\r\n        "cdc": "spyglass",\r\n        "sg": "spyglass",\r\n        "dft": "spyglass",\r\n        "dc": "dc",\r\n        "fm": "formal",\r\n        "pt": "primetime",\r\n        "ptpx": "primetime",\r\n        "vcs": "vcs",\r\n        "xrun": "xrun"\r\n    }\r\n    return flow_dir_map\r\n\r\n\r\ndef check_cfg(flow, design, flow_dir_map):\r\n    """\r\n    Check the exists of config files for each flow\r\n    """\r\n    pass  # TODO: Wait for later update\r\n\r\n\r\ndef copy_folder(src, dst):\r\n    """\r\n    Copy all files and folder under the src to dst folder\r\n    """\r\n    print("GRUN-Info: Copy {0} to {1}".format(src, dst))\r\n    if os.path.exists(src):\r\n        for file in os.listdir(src):\r\n            src_file_path = os.path.join(src, file)\r\n            dst_file_path = os.path.join(dst, file)\r\n            if os.path.isdir(src_file_path):\r\n                if os.path.exists(dst_file_path):\r\n                    shutil.rmtree(dst_file_path)\r\n                shutil.copytree(src_file_path, dst_file_path)\r\n                print("Copytree "+src_file_path+dst_file_path)\r\n            else:\r\n                shutil.copy(src_file_path, dst_file_path)\r\n    else:\r\n        print("GRUN-Error: Path {0} not exist.".format(src))\r\n\r\n    print("GRUN-Info: Copy done.")\r\n\r\n\r\ndef set_flow_env(out_dir_path, design, top, design_path, flow, tag, flow_dir_map, flow_root_path):\r\n    """\r\n    Create the folder and setup the environment of each flow\r\n    the work folder is naming according to the top name not design\r\n    """\r\n\r\n    check_cfg(flow, design, flow_dir_map)\r\n    print(60*\'=\')\r\n    print(\'GRUN-Info: Begin to copy the scripts of {0}\'.format(flow))\r\n\r\n    out_dir_path = os.path.join(out_dir_path, flow, top, tag)\r\n    print("GRUN-Info: Delete the folder {0}".format(out_dir_path))\r\n    if os.path.exists(out_dir_path):\r\n        shutil.rmtree(out_dir_path)\r\n    os.makedirs(out_dir_path)\r\n\r\n    # copy the filelist to outdir\r\n    fl_dir_path = os.path.join(design_path, \'filelist\')\r\n    shutil.copytree(fl_dir_path, os.path.join(out_dir_path, \'filelist\'))\r\n\r\n    # copy the common flow scripts to outdir\r\n    flow_dir_path = os.path.join(flow_root_path, flow_dir_map[flow])\r\n    copy_folder(flow_dir_path, out_dir_path)\r\n\r\n    # copy the design setup and local config to outdir\r\n    design_flow_path = os.path.join(design_path, \'qc\', flow_dir_map[flow])\r\n    copy_folder(design_flow_path, out_dir_path)\r\n\r\n    # for dc\r\n    if flow == \'dc\':\r\n        if os.path.exists(os.path.join(out_dir_path, \'input\', \'sdc\')):\r\n            shutil.rmtree(os.path.join(out_dir_path, \'input\', \'sdc\'))\r\n        shutil.copytree(os.path.join(design_path, \'qc\', \'sdc\'),\r\n                        os.path.join(out_dir_path, \'input\', \'sdc\'))\r\n        shutil.copy(os.path.join(design_path, \'filelist\', design.lower()+r\'_syn.f\'),\r\n                    os.path.join(out_dir_path, \'input\', design.lower()+r\'_syn.f\'))\r\n        # expand the filelist\r\n        expd_fl(os.path.join(out_dir_path, \'input\', design.lower()+r\'_syn.f\'),\r\n                os.path.join(out_dir_path, \'input\', \'filelist\'), \'syn\')\r\n        shutil.move(os.path.join(out_dir_path, \'input\', \'sdc\', design+r\'.sdc\'),\r\n                    os.path.join(out_dir_path, \'input\', \'sdc\', design+r\'.func.sdc\'))\r\n\r\n    # Auto set the design top\r\n    new_line = \'\'\r\n    new_file = \'\'\r\n    with open(os.path.join(out_dir_path, r\'run.sh\'), \'r\') as f:\r\n        for line in f.readlines():\r\n            print(line)\r\n            new_line = line.replace(\'{TOP}\', top)\r\n            new_line = new_line.replace(\'{DESIGN}\', design)\r\n            new_file += new_line\r\n    with open(os.path.join(out_dir_path, r\'run.sh\'), \'w\') as f:\r\n        f.write(new_file)\r\n\r\n    print(\'GRUN-Info: The scripts of {0} is copied done.\'.format(flow))\r\n    print(\'GRUN-Info: The flow work folder is {0}\'.format(out_dir_path))\r\n    print(60*\'=\')\r\n\r\n\r\ndef run_phase(design, top, tag, out_dir_path, design_path, flow_root_path, flow_dir_map, flow):\r\n    """\r\n    The main run phase of each flow\r\n    """\r\n    out_dir_path = os.path.join(out_dir_path, flow, top, tag)\r\n    os.chdir(out_dir_path)\r\n    cmd = {\r\n        "lint": "./run.sh lint",\r\n        "cdc": "./run.sh cdc",\r\n        "sg": "./run.sh sg",\r\n        "dft": "./run.sh",  # FIXME:\r\n        "dc": "./run.sh",\r\n        "fm": "formal",  # FIXME:\r\n        "pt": "primetime",  # FIXME:\r\n        "ptpx": "./run.sh",  # FIXME:\r\n        "vcs": "./run.sh",\r\n        "xrun": "./run.sh"\r\n    }\r\n    subprocess.run(cmd[flow], shell=True)\r\n    print(60*"=")\r\n    print("The flow running result is in {0}".format(out_dir_path))\r\n    print(60*"=")\r\n\r\n\r\ndef init_design(design, flow_root_path):\r\n    """\r\n    This function used to create the initial design folder.\r\n    """\r\n    cwd_path = os.getcwd()\r\n    init_path = os.path.join(flow_root_path, \'init\', \'demo\')\r\n    design_path = os.path.join(cwd_path, design)\r\n    shutil.copytree(init_path, design_path)\r\n\r\n    # rename the init folder\r\n    d = {\'{DEMO_FILELIST}\': os.path.join(design_path, \'filelist\', design+r\'_syn.f\'),\r\n         \'{DEMO_SGDC_FILE}\': os.path.join(design_path, \'qc\', \'spyglass\', \'sgdc\', design+r\'.sgdc\'),\r\n         \'{DEMO_LINT_WAIVE_FILE}\': os.path.join(design_path, \'qc\', \'spyglass\', \'waive\', design+\'_lint.awl\'),\r\n         \'{DEMO_CDC_WAIVE_FILE}\': os.path.join(design_path, \'qc\', \'spyglass\', \'waive\', design+\'_cdc.awl\')}\r\n\r\n    for root, dirs, files in os.walk(os.path.join(cwd_path, design)):\r\n        for file in files:\r\n            new_line = \'\'\r\n            new_file = \'\'\r\n            with open(os.path.join(root, file), \'r\') as f:\r\n                for line in f.readlines():\r\n                    new_line = line\r\n                    for key, value in d.items():\r\n                        new_line = new_line.replace(key, value)\r\n                    new_file += new_line\r\n            with open(os.path.join(root, file), \'w\') as f:\r\n                f.write(new_file)\r\n            if \'demo\' in file:  # TODO: not robust, if the word in filenema inculde demo but not full match\r\n                new_name = file.replace(\'demo\', design)\r\n                os.rename(os.path.join(root, file),\r\n                          os.path.join(root, new_name))\r\n    gprint("GRUN-Info: The design path is {0}.".format(os.path.join(cwd_path, design)))\r\n    gprint("GRUN-Info: The init of {0} is done.".format(design))\r\n    gprint(60*"=")\r\n\r\n\r\nif __name__ == "__main__":\r\n    version = \'r0p1\'\r\n    Author = \'Yinghao.Xu\'\r\n    parser = argparse.ArgumentParser(\r\n        prog="grun",\r\n        description=\'python script for running the eda flow, such as Spyglass, DesignCompiler and so on \\n version: {0}, Author:{1}\'.format(\r\n            version, Author)\r\n    )\r\n    parser.add_argument(\'flows\', type=str,\r\n                        nargs=\'+\',\r\n                        choices=[\'lint\', \'cdc\', \'sg\', \'dft\', \'dc\', \'fm\', \'pt\',\r\n                                 \'ptpx\', \'vcs\', \'xrun\', \'init\'],\r\n                        help="""\r\n                        This script support the following flows:\r\n                            lint: use Spyglass to run lint check.\r\n                            cdc:  use Spyglass to run cdc check.\r\n                            sg:   run Spyglass with GUI.\r\n                            dft:  use Spyglass to run dft check.\r\n                            dc:   use DesignCompiler to run synthesis.\r\n                            fm:   use Formality to run formal compare.\r\n                            pt:   run primetime for timing analysis.\r\n                            ptpx: use PrimeTime to run power analysis.\r\n                            vcs:  use vcs to compile the design.\r\n                            xrun: use xcelium to compile the design.\r\n                            init: create the initial design floder in current path.\r\n                        """)  # TODO: support run multi flow once time???\r\n    parser.add_argument(\'top\', type=str,\r\n                        help="""\r\n                        The top name of the design, if you want to run the flow for submodules under the design, \\\r\n                        use dot as separator to connect the top and submodule, such as design.top\')\r\n                        """)\r\n    parser.add_argument(\'-tag\', type=str, default="normal",\r\n                        help="The tag of this run, if you don\'t want to overwrite the last run folder, set this to different string")\r\n    parser.add_argument(\'-nr\', \'--norun\',\r\n                        help="Assert this parameter to just set up the flow environment, but not run the flow.",\r\n                        action=\'store_true\')\r\n    parser.add_argument(\'-outdir\', type=str,\r\n                        default=os.path.join(os.getenv("PROJ_HOME", default=""), "work"))\r\n    args = parser.parse_args()\r\n\r\n    top_split = args.top.split(".")\r\n\r\n    if len(top_split) == 1:\r\n        top = top_split[0]\r\n        design = top.lower()\r\n    elif len(top_split) == 2:\r\n        design = top_split[0].lower()\r\n        top = top_split[1]\r\n    else:\r\n        print(\r\n            "GRUN-Error: Invalid input parameter of top, must be top_name or top_name.submodule!!!")\r\n        sys.exit()\r\n    de_path = os.getenv("DEPATH", default="")\r\n    if de_path == "":\r\n        print("GRUN-Error: Can not find the environment of DEPATH, please source the prj.env!!!")\r\n        sys.exit()\r\n\r\n    flow_dir_map = set_flow_dir_map()\r\n    flow_root_path = os.path.join(de_path, "flows")\r\n    print("GRUN-Info: The DEPATH is {0}".format(de_path))\r\n    print("GRUN-Info: The flow path is {0}".format(flow_root_path))\r\n\r\n    for flow in args.flows:\r\n        if flow == \'init\':\r\n            init_design(design, flow_root_path)\r\n            sys.exit()\r\n\r\n    design_path = find_dir_path(os.path.join(de_path, "src"), design)\r\n    print("GRUN-Info: The design path is {0}".format(design_path))\r\n\r\n    for flow in args.flows:\r\n        if flow not in flow_dir_map:\r\n            print("GRUN-Error: Invalid flow to run, please check the input parameter!!!")\r\n            sys.exit()\r\n\r\n        out_dir_path = os.path.join(os.path.expandvars(args.outdir))\r\n        set_flow_env(out_dir_path, design, top, design_path,\r\n                     flow, args.tag, flow_dir_map, flow_root_path)\r\n        if args.norun:\r\n            pass\r\n        else:\r\n            run_phase(design, top, args.tag, out_dir_path, design_path,\r\n                      flow_root_path, flow_dir_map, flow)\r\n\n'})})}function f(r={}){const{wrapper:n}={...(0,i.R)(),...r.components};return n?(0,e.jsx)(n,{...r,children:(0,e.jsx)(l,{...r})}):l(r)}},28453:(r,n,t)=>{t.d(n,{R:()=>s,x:()=>p});var e=t(96540);const i={},o=e.createContext(i);function s(r){const n=e.useContext(o);return e.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function p(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(i):r.components||i:s(r.components),e.createElement(o.Provider,{value:n},r.children)}}}]);